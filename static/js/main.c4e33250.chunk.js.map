{"version":3,"sources":["api/index.js","store/reducers/Cities.js","store/reducers/Main.js","store/reducers/Modals.js","components/Card/Card.jsx","components/Card/CardAdd.jsx","components/Modals/AddCity/AddCity.jsx","components/Modals/DetailInfo/DetailInfo.jsx","Loader/Loader.jsx","App.jsx","store/index.js","index.js"],"names":["instance","axios","baseURL","weatherApi","lat","lon","get","name","then","response","data","list","cities","createSlice","initialState","localLocation","locations","reducers","addCity","state","action","payload","localStorage","setItem","JSON","stringify","deleteCity","filter","el","setLocalCity","push","actions","main","isFetching","toggleFetching","getData","createAsyncThunk","city","a","dispatch","toggleDetailInfoPopupOpen","res","alert","asyncAddCity","modals","addCityPopupOpen","detailInfoPopup","isOpen","cityInfo","toggleAddCityPopupOpen","setDetailInfoPopup","extraReducers","fulfilled","Card","icon","degrees","weather","useDispatch","className","onClick","src","alt","CardAdd","popupIsOpen","useSelector","AddCity","useState","inputValue","changeInputValue","handleClick","document","body","style","overflow","e","stopPropagation","value","onChange","target","placeholder","type","id","DetailInfo","test","map","key","date","Date","dt_txt","forecastDate","getDate","getMonth","getFullYear","getHours","temp","Math","round","Loader","App","currentLocation","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","parse","getItem","forEach","geoLocationCity","addedCity","configureStore","reducer","Cities","Modals","Main","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.c4e33250.chunk.js","sourcesContent":["import * as axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.openweathermap.org/data/2.5/\"\n})\n\nexport const weatherApi = {\n    byCoord(lat, lon) {\n        return instance.get(`weather?lat=${lat}&lon=${lon}&units=metric&lang=en&appid=fec27e67f0ec6ce5544546b6c430c8c9`)\n    },\n    byName(name) {\n        return instance.get(`weather?q=${name}&units=metric&lang=en&appid=fec27e67f0ec6ce5544546b6c430c8c9`)\n    },\n    forWeek(name) {\n        return instance.get(`forecast?q=${name}&lang=en&units=metric&appid=fec27e67f0ec6ce5544546b6c430c8c9`)\n            .then(response => response.data.list)\n    }\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cities = createSlice({\n    name: 'cities',\n    initialState: {\n        localLocation: [],\n        locations: []\n    },\n    reducers: {\n        addCity(state, action) {\n            state.locations = [...state.locations, action.payload]\n            localStorage.setItem('locations', JSON.stringify(state.locations))\n        },\n        deleteCity(state, action) {\n            state.locations = state.locations.filter(el => el.name !== action.payload)\n            localStorage.setItem('locations', JSON.stringify(state.locations))\n        },\n        setLocalCity(state, action) {\n            state.localLocation.push(action.payload)\n        }\n    }\n})\n\nexport const {addCity, setLocalCity, deleteCity} = cities.actions\nexport default cities.reducer","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst main = createSlice({\n    name: 'main',\n    initialState: {\n        isFetching: false\n    },\n    reducers: {\n        toggleFetching(state, action) {\n            state.isFetching = action.payload\n        }\n    }\n})\n\nexport const {toggleFetching} = main.actions\nexport default main.reducer","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { weatherApi } from \"../../api\";\nimport { addCity } from \"./Cities\";\nimport { toggleFetching } from \"./Main\";\n\nexport const getData = createAsyncThunk(\n    'modals/getData',\n    async (city, {dispatch}) => {\n        dispatch(toggleFetching(true))\n        try {\n            const response = await weatherApi.forWeek(city)\n            dispatch(toggleDetailInfoPopupOpen(true))\n            return {city, res: response}\n        } catch (err) {\n            alert(`Some error occured`)\n        } finally {\n            dispatch(toggleFetching(false))\n        }\n    }\n)\n\nexport const asyncAddCity = createAsyncThunk(\n    'modals/addCity',\n    async (city, {dispatch}) => {\n        dispatch(toggleFetching(true))\n        try {\n            const response = await weatherApi.byName(city)\n            dispatch(addCity(response.data))\n        } catch(err) {\n            alert(`${city} city was not found`)\n        } finally {\n            dispatch(toggleFetching(false))\n        }\n    }\n)\n\nconst modals = createSlice({\n    name: 'modals',\n    initialState: {\n        addCityPopupOpen: false,\n        detailInfoPopup: {\n            isOpen: false,\n            cityInfo: {}\n        }\n    },\n    reducers: {\n        toggleAddCityPopupOpen(state, action) {\n            state.addCityPopupOpen = action.payload\n        },\n        toggleDetailInfoPopupOpen(state, action) {\n            state.detailInfoPopup.isOpen = action.payload\n        },\n        setDetailInfoPopup(state, action) {\n            state.detailInfoPopup.cityInfo = action.payload\n        }\n    },\n    extraReducers: {\n        [getData.fulfilled]: (state, action) => {\n            state.detailInfoPopup.cityInfo = action.payload\n        }\n    }\n})\n\nexport const {toggleAddCityPopupOpen, toggleDetailInfoPopupOpen, setDetailInfoPopup} = modals.actions\nexport default modals.reducer","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport './card.css'\nimport {getData} from '../../store/reducers/Modals'\n\nexport const Card = ({icon, degrees, weather, city}) => {\n    const dispatch = useDispatch()\n\n    const handleClick = () => {\n        dispatch(getData(city))\n    }\n    return (\n        <div className=\"card\" onClick={handleClick}>\n            <img src={icon} alt=\"icon\" />\n            <h2 className=\"card-degree\">{degrees}</h2>\n            <p className=\"card-weather\">{weather}</p>\n            <h3 className=\"card-city\">{city}</h3>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport './card.css'\nimport { toggleAddCityPopupOpen } from '../../store/reducers/Modals'\n\nexport const CardAdd = () => {\n    const popupIsOpen = useSelector(state => state.modals.addCityPopupOpen)\n    const dispatch = useDispatch()\n    const handleClick = () => {\n        dispatch(toggleAddCityPopupOpen(!popupIsOpen))\n    }\n\n    return (\n        <div className=\"card\">\n            <h2>Add City</h2>\n            <button className=\"btn-add\" onClick={handleClick}>+</button>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport '../modal.css'\nimport './add-city.css'\nimport { asyncAddCity, toggleAddCityPopupOpen } from '../../../store/reducers/Modals'\n\nexport const AddCity = () => {\n\n    const [inputValue, changeInputValue] = useState('')\n\n    const popupIsOpen = useSelector(state => state.modals.addCityPopupOpen)\n    const dispatch = useDispatch()\n    const handleClick = () => {\n        dispatch(toggleAddCityPopupOpen(!popupIsOpen))\n    }\n    const handleAddCity = (name) => {\n        dispatch(asyncAddCity(name))\n    }\n    popupIsOpen ? document.body.style.overflow = \"hidden\" : document.body.style.overflow = \"auto\"\n    return (\n        <div className={popupIsOpen ? 'popup active' : 'popup'} onClick={handleClick}>\n            <div className=\"popup-inner\" onClick={e => e.stopPropagation()}>\n                <span className=\"popup-close\" onClick={handleClick}>x</span>\n                <h2 className=\"popup-title\">Add City</h2>\n                <input value={inputValue} onChange={e => changeInputValue(e.target.value)} className=\"popup-input\" placeholder=\"Enter city name [ex. London]\" type=\"text\" id=\"city\" />\n                <button className=\"popup-btn\" onClick={() => handleAddCity(inputValue)}>Add City</button>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport { deleteCity } from '../../../store/reducers/Cities'\nimport { toggleDetailInfoPopupOpen } from '../../../store/reducers/Modals'\nimport './detail-info.css'\n\nexport const DetailInfo = () => {\n    const dispatch = useDispatch()\n    \n    const cityInfo = useSelector(state => state.modals.detailInfoPopup.cityInfo)\n    const popupIsOpen = useSelector(state => state.modals.detailInfoPopup.isOpen)\n\n    const test = cityInfo.res && cityInfo.res.map((el,key) => {\n        const date = new Date(el.dt_txt)\n        const forecastDate = `${date.getDate()}.${date.getMonth()+1}.${date.getFullYear()}, ${date.getHours()}:00`\n        const temp = Math.round(el.main.temp)\n        const icon = el.weather[0].icon\n        const weather = el.weather[0].main\n\n        return <div key={key} className='card'>\n            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\n            <h4 className=\"card-city\">{forecastDate}</h4>\n            <p className=\"card-degree\">{temp}°</p>\n            <p className=\"card-weather\">{weather}</p>\n        </div>\n    })\n\n    const handleClick = () => {\n        dispatch(toggleDetailInfoPopupOpen(false))\n    }\n    const handleDeleteClick = () => {\n        dispatch(deleteCity(cityInfo.city))\n    }\n    popupIsOpen ? document.body.style.overflow = \"hidden\" : document.body.style.overflow = \"auto\"\n    return (\n        <div className={popupIsOpen ? \"popup active\" : \"popup\"} onClick={handleClick}>\n            <div className=\"popup-inner\" onClick={e => e.stopPropagation()}>\n                <span className=\"popup-close\" onClick={handleClick}>x</span>\n                <div className='detail-header'>\n                    <h2 className=\"popup-title\">{cityInfo.city} Forecast</h2>\n                    <button className='btn' onClick={handleDeleteClick}>Delete</button>\n                </div>\n                <div className='detail-list'>\n                    {test}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './loader.css'\n\nexport const Loader = () => {\n    return (\n        <div className=\"loader\">\n            <div className=\"lds-facebook\"><div></div><div></div><div></div></div>\n        </div>\n    )\n}\n","import './App.css';\nimport { Card } from './components/Card/Card';\nimport { CardAdd } from './components/Card/CardAdd';\nimport { addCity, setLocalCity } from './store/reducers/Cities';\nimport { useDispatch } from 'react-redux';\nimport { weatherApi } from './api';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { AddCity } from './components/Modals/AddCity/AddCity'\nimport {DetailInfo} from './components/Modals/DetailInfo/DetailInfo'\nimport { Loader } from './Loader/Loader';\nimport {toggleFetching} from './store/reducers/Main'\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const cities = useSelector(state => state.cities.locations)\n  const currentLocation = useSelector(state => state.cities.localLocation)\n  const isFetching = useSelector(state => state.main.isFetching)\n\n  useEffect(() => {\n    // const locationsItems = JSON.parse(localStorage.getItem(''))\n    dispatch(toggleFetching(true))\n    navigator.geolocation.getCurrentPosition((pos) => {\n      weatherApi.byCoord(pos.coords.latitude, pos.coords.longitude)\n        .then(res => {\n          dispatch(setLocalCity(res.data))\n          dispatch(toggleFetching(false))\n      })\n    })\n  }, [])\n\n  useEffect(() => {\n    const locations = JSON.parse(localStorage.getItem('locations')) || []\n    locations.forEach(el => dispatch(addCity(el)))\n  }, [])\n\n  const geoLocationCity = currentLocation.map((el, key) => {\n    return <Card\n      key={key}\n        icon={`http://openweathermap.org/img/wn/${el.weather[0].icon}@2x.png`}\n        degrees={Math.round(el.main.temp)}\n        weather={el.weather[0].main}\n        city={el.name}\n      />\n  })\n\n  const addedCity = cities.map((el, key) => {\n    const temp = Math.round(el.main.temp)\n    return <Card\n      icon={`http://openweathermap.org/img/wn/${el.weather[0].icon}@2x.png`}\n      degrees={`${temp}°`}\n      weather={el.weather[0].main}\n      city={el.name}\n      key={key}\n    />\n  })\n\n  return (\n    <div className=\"App\">\n        <h1>Weather Cloud</h1>\n        {\n          isFetching\n          ? <Loader />\n          : <div className=\"cards\">\n            {geoLocationCity}\n            {addedCity}\n            <CardAdd />\n            <AddCity />\n            <DetailInfo />\n          </div>\n        }\n      </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport Cities from \"./reducers/Cities\";\nimport Main from \"./reducers/Main\";\nimport Modals from \"./reducers/Modals\";\n\nexport default configureStore({\n    reducer: {cities: Cities, modals: Modals, main: Main}\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport { Provider } from 'react-redux';\nimport store from './store/index'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}